// <auto-generated />
using DigitalDevices;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DigitalDevices.Migrations
{
    [DbContext(typeof(DigitalDevicesContext))]
    [Migration("20250310123215_GenerationOfData")]
    partial class GenerationOfData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DigitalDevices.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("DigitalDevices.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Warranty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Products");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("DigitalDevices.Models.Computer", b =>
                {
                    b.HasBaseType("DigitalDevices.Models.Product");

                    b.Property<float>("CPFrequency")
                        .HasColumnType("real");

                    b.Property<string>("CPModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CPcores")
                        .HasColumnType("int");

                    b.Property<string>("GPU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GPUGB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OS")
                        .HasColumnType("int");

                    b.Property<string>("RAMGB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RAMType")
                        .HasColumnType("int");

                    b.Property<int>("StorageDriveType")
                        .HasColumnType("int");

                    b.Property<string>("StorageGB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Computers", (string)null);
                });

            modelBuilder.Entity("DigitalDevices.Models.GraphicalTablet", b =>
                {
                    b.HasBaseType("DigitalDevices.Models.Product");

                    b.Property<int>("ConnectionType")
                        .HasColumnType("int");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Diagonal")
                        .HasColumnType("int");

                    b.Property<float>("FPS")
                        .HasColumnType("real");

                    b.Property<int>("MatrixType")
                        .HasColumnType("int");

                    b.Property<int>("ResponceTime")
                        .HasColumnType("int");

                    b.Property<int>("Sensivity")
                        .HasColumnType("int");

                    b.Property<int>("TabletDefinition")
                        .HasColumnType("int");

                    b.Property<float>("WorkHeight")
                        .HasColumnType("real");

                    b.Property<float>("WorkWidth")
                        .HasColumnType("real");

                    b.ToTable("GraphicalTablets", (string)null);
                });

            modelBuilder.Entity("DigitalDevices.Models.Headphones", b =>
                {
                    b.HasBaseType("DigitalDevices.Models.Product");

                    b.Property<int>("Connection")
                        .HasColumnType("int");

                    b.Property<int>("ConnectionType")
                        .HasColumnType("int");

                    b.Property<int>("HeadphonesType")
                        .HasColumnType("int");

                    b.Property<int>("MaxFrequency")
                        .HasColumnType("int");

                    b.Property<bool>("Microphone")
                        .HasColumnType("bit");

                    b.Property<int>("Sensivity")
                        .HasColumnType("int");

                    b.Property<float>("SoundSchemeFormat")
                        .HasColumnType("real");

                    b.ToTable("Headphones", (string)null);
                });

            modelBuilder.Entity("DigitalDevices.Models.Keyboard", b =>
                {
                    b.HasBaseType("DigitalDevices.Models.Product");

                    b.Property<int>("ConnectionType")
                        .HasColumnType("int");

                    b.Property<int>("Keycaps")
                        .HasColumnType("int");

                    b.Property<int>("KeysCount")
                        .HasColumnType("int");

                    b.Property<int>("LifeCycle")
                        .HasColumnType("int");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PushStrength")
                        .HasColumnType("int");

                    b.Property<string>("Switches")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("Keyboards", (string)null);
                });

            modelBuilder.Entity("DigitalDevices.Models.Laptop", b =>
                {
                    b.HasBaseType("DigitalDevices.Models.Product");

                    b.Property<float>("CPFrequency")
                        .HasColumnType("real");

                    b.Property<string>("CPModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CPcores")
                        .HasColumnType("int");

                    b.Property<string>("GPU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GPUGB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OS")
                        .HasColumnType("int");

                    b.Property<string>("RAMGB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RAMType")
                        .HasColumnType("int");

                    b.Property<int>("StorageDriveType")
                        .HasColumnType("int");

                    b.Property<string>("StorageGB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Laptops", (string)null);
                });

            modelBuilder.Entity("DigitalDevices.Models.Microphone", b =>
                {
                    b.HasBaseType("DigitalDevices.Models.Product");

                    b.Property<int>("AudioConnectionType")
                        .HasColumnType("int");

                    b.Property<int>("ConnectionType")
                        .HasColumnType("int");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<int>("ExecutionType")
                        .HasColumnType("int");

                    b.Property<int>("Impedance")
                        .HasColumnType("int");

                    b.Property<int>("MaxFrequency")
                        .HasColumnType("int");

                    b.Property<int>("MinFrequency")
                        .HasColumnType("int");

                    b.Property<int>("Principle")
                        .HasColumnType("int");

                    b.ToTable("Microphones", (string)null);
                });

            modelBuilder.Entity("DigitalDevices.Models.Monitor", b =>
                {
                    b.HasBaseType("DigitalDevices.Models.Product");

                    b.Property<int>("ConnectionType")
                        .HasColumnType("int");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Diagonal")
                        .HasColumnType("int");

                    b.Property<float>("FPS")
                        .HasColumnType("real");

                    b.Property<int>("MatrixType")
                        .HasColumnType("int");

                    b.Property<int>("VideoConnector")
                        .HasColumnType("int");

                    b.ToTable("Monitors", (string)null);
                });

            modelBuilder.Entity("DigitalDevices.Models.Mouse", b =>
                {
                    b.HasBaseType("DigitalDevices.Models.Product");

                    b.Property<int>("ConnectionType")
                        .HasColumnType("int");

                    b.Property<int>("DPI")
                        .HasColumnType("int");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<int>("KeysCount")
                        .HasColumnType("int");

                    b.Property<int>("MaxAcceleration")
                        .HasColumnType("int");

                    b.ToTable("Mice", (string)null);
                });

            modelBuilder.Entity("DigitalDevices.Models.TV", b =>
                {
                    b.HasBaseType("DigitalDevices.Models.Product");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Diagonal")
                        .HasColumnType("int");

                    b.Property<float>("FPS")
                        .HasColumnType("real");

                    b.Property<int>("MatrixType")
                        .HasColumnType("int");

                    b.ToTable("TVs", (string)null);
                });

            modelBuilder.Entity("DigitalDevices.Models.Tablet", b =>
                {
                    b.HasBaseType("DigitalDevices.Models.Product");

                    b.Property<string>("CPU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Diagonal")
                        .HasColumnType("int");

                    b.Property<float>("FPS")
                        .HasColumnType("real");

                    b.Property<int>("MatrixType")
                        .HasColumnType("int");

                    b.ToTable("Tablets", (string)null);
                });

            modelBuilder.Entity("DigitalDevices.Models.WebCam", b =>
                {
                    b.HasBaseType("DigitalDevices.Models.Product");

                    b.Property<int>("ConnectionType")
                        .HasColumnType("int");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FPS")
                        .HasColumnType("int");

                    b.Property<int>("MegaPixels")
                        .HasColumnType("int");

                    b.Property<bool>("Microphone")
                        .HasColumnType("bit");

                    b.ToTable("WebCams", (string)null);
                });

            modelBuilder.Entity("DigitalDevices.Models.Product", b =>
                {
                    b.HasOne("DigitalDevices.Models.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("DigitalDevices.Models.Computer", b =>
                {
                    b.HasOne("DigitalDevices.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("DigitalDevices.Models.Computer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalDevices.Models.GraphicalTablet", b =>
                {
                    b.HasOne("DigitalDevices.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("DigitalDevices.Models.GraphicalTablet", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalDevices.Models.Headphones", b =>
                {
                    b.HasOne("DigitalDevices.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("DigitalDevices.Models.Headphones", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalDevices.Models.Keyboard", b =>
                {
                    b.HasOne("DigitalDevices.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("DigitalDevices.Models.Keyboard", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalDevices.Models.Laptop", b =>
                {
                    b.HasOne("DigitalDevices.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("DigitalDevices.Models.Laptop", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalDevices.Models.Microphone", b =>
                {
                    b.HasOne("DigitalDevices.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("DigitalDevices.Models.Microphone", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalDevices.Models.Monitor", b =>
                {
                    b.HasOne("DigitalDevices.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("DigitalDevices.Models.Monitor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalDevices.Models.Mouse", b =>
                {
                    b.HasOne("DigitalDevices.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("DigitalDevices.Models.Mouse", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalDevices.Models.TV", b =>
                {
                    b.HasOne("DigitalDevices.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("DigitalDevices.Models.TV", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalDevices.Models.Tablet", b =>
                {
                    b.HasOne("DigitalDevices.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("DigitalDevices.Models.Tablet", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalDevices.Models.WebCam", b =>
                {
                    b.HasOne("DigitalDevices.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("DigitalDevices.Models.WebCam", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalDevices.Models.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
