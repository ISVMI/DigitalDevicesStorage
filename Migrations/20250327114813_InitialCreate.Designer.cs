// <auto-generated />
using DigitalDevices;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DigitalDevices.Migrations
{
    [DbContext(typeof(DigitalDevicesContext))]
    [Migration("20250327114813_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DigitalDevices.Models.Characteristics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacteristicsTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicsTypeId");

                    b.ToTable("Characteristics");
                });

            modelBuilder.Entity("DigitalDevices.Models.CharacteristicsProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CharacteristicsId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CharacteristicsId");

                    b.HasIndex("CharacteristicsId");

                    b.ToTable("CharacteristicsProduct", (string)null);
                });

            modelBuilder.Entity("DigitalDevices.Models.CharacteristicsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnumType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CharacteristicsType");
                });

            modelBuilder.Entity("DigitalDevices.Models.CharacteristicsTypeProductTypes", b =>
                {
                    b.Property<int>("ProductTypesId")
                        .HasColumnType("int");

                    b.Property<int>("CharacteristicsTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProductTypesId", "CharacteristicsTypeId");

                    b.HasIndex("CharacteristicsTypeId");

                    b.ToTable("CharacteristicsTypeProductTypes", (string)null);
                });

            modelBuilder.Entity("DigitalDevices.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("DigitalDevices.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("float(18, 2)");

                    b.Property<int>("ProductTypesId")
                        .HasColumnType("int");

                    b.Property<int>("Warranty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ProductTypesId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DigitalDevices.Models.ProductTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("DigitalDevices.Models.Characteristics", b =>
                {
                    b.HasOne("DigitalDevices.Models.CharacteristicsType", "CharacteristicsType")
                        .WithMany("Characteristics")
                        .HasForeignKey("CharacteristicsTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacteristicsType");
                });

            modelBuilder.Entity("DigitalDevices.Models.CharacteristicsProduct", b =>
                {
                    b.HasOne("DigitalDevices.Models.Characteristics", "Characteristics")
                        .WithMany("CharacteristicsProduct")
                        .HasForeignKey("CharacteristicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalDevices.Models.Product", "Products")
                        .WithMany("CharacteristicsProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Characteristics");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("DigitalDevices.Models.CharacteristicsTypeProductTypes", b =>
                {
                    b.HasOne("DigitalDevices.Models.CharacteristicsType", "CharacteristicsTypes")
                        .WithMany("CharacteristicsTypeProductTypes")
                        .HasForeignKey("CharacteristicsTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalDevices.Models.ProductTypes", "ProductTypes")
                        .WithMany("CharacteristicsTypeProductTypes")
                        .HasForeignKey("ProductTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacteristicsTypes");

                    b.Navigation("ProductTypes");
                });

            modelBuilder.Entity("DigitalDevices.Models.Product", b =>
                {
                    b.HasOne("DigitalDevices.Models.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalDevices.Models.ProductTypes", "ProductTypes")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("ProductTypes");
                });

            modelBuilder.Entity("DigitalDevices.Models.Characteristics", b =>
                {
                    b.Navigation("CharacteristicsProduct");
                });

            modelBuilder.Entity("DigitalDevices.Models.CharacteristicsType", b =>
                {
                    b.Navigation("Characteristics");

                    b.Navigation("CharacteristicsTypeProductTypes");
                });

            modelBuilder.Entity("DigitalDevices.Models.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DigitalDevices.Models.Product", b =>
                {
                    b.Navigation("CharacteristicsProduct");
                });

            modelBuilder.Entity("DigitalDevices.Models.ProductTypes", b =>
                {
                    b.Navigation("CharacteristicsTypeProductTypes");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
