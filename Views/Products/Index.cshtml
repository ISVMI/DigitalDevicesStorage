@using DigitalDevices
@using DigitalDevices.Enums;
@using Humanizer
@using Microsoft.EntityFrameworkCore
@using System.Globalization
@model PaginatedList<DigitalDevices.Models.Product>
@{
    ViewData["Title"] = "Index";
}

<h1>Техника</h1>

<p>
    <a asp-action="Create"
       asp-route-productType="@ViewData["ProductType"]"
       asp-route-currentSort="@ViewData["CurrentSort"]"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       asp-route-sortField="@ViewData["SortField"]"
       asp-route-sortOrder="@ViewData["SortOrder"]"
       asp-route-pageNumber="@ViewData["PageNumber"]">
        Добавить новую
    </a>
</p>

@{
    var optionsBuilder = new DbContextOptionsBuilder<DigitalDevicesContext>();
    DigitalDevicesContext context = new(optionsBuilder.Options);
    var minPrice = context.Products.Any() ? context.Products.Min(p => p.Price) : 0;
    var maxPrice = context.Products.Any() ? context.Products.Max(p => p.Price) : 0;
    if (!string.IsNullOrEmpty(ViewData["ProductType"].ToString()))
    {
        minPrice = context.Products.Any() ? context.Products.Where(p => p.ProductTypes.Name == ViewData["ProductType"].ToString()).Min(p => p.Price) : 0;
        maxPrice = context.Products.Any() ? context.Products.Where(p => p.ProductTypes.Name == ViewData["ProductType"].ToString()).Max(p => p.Price) : 0;
    }

    var tabletsWidths = await context.Characteristics
    .Where(c => c.CharacteristicsType.Name == "Рабочая ширина (мм)")
    .ToListAsync();
    List<float> widths = new();
    NumberFormatInfo provider = new NumberFormatInfo();
    provider.NumberDecimalSeparator = ".";
    provider.NumberGroupSeparator = ".";
    foreach (var width in tabletsWidths)
    {
        widths.Add(float.Parse(width.Value, provider));
    }
    widths.Sort();
    float minTabletWidth = widths.First();
    float maxTabletWidth = widths.Last();

    var stringKeysCount = await context.Characteristics
    .Where(c => c.CharacteristicsType.Name == "Количество клавиш")
    .Select(c => c.Value).ToListAsync();
    List<int> keysCount = new();
    foreach (var count in stringKeysCount)
    {
        keysCount.Add(int.Parse(count));
    }
    keysCount.Sort();
    int minKeysCount = keysCount.First();
    int maxKeysCount = keysCount.Last();

    float minDiagonal = 0;
    float maxDiagonal = 0;

    switch (ViewData["ProductType"].ToString())
    {
        case "Монитор":
            {
                minDiagonal = 14;
                maxDiagonal = 57;
                break;
            }
        case "Планшет":
            {
                minDiagonal = 7;
                maxDiagonal = 14.6F;
                break;
            }
        case "Телевизор":
            {
                minDiagonal = 23.6F;
                maxDiagonal = 110;
                break;
            }
    }

    int minFPS = 0;
    int maxFPS = 0;
    List<int> fpsList = new();
    switch (ViewData["ProductType"].ToString())
    {
        case "Монитор":
            {
                minFPS = 60;
                maxFPS = 540;
                break;
            }
        case "Планшет":
            {
                fpsList = new() { 50, 60, 90, 120, 144 };
                break;
            }
        case "Телевизор":
            {
                fpsList = new() { 60, 120, 144 };
                break;
            }
        case "Веб-камера":
            {
                fpsList = new() { 15, 30, 40, 60, 90 };
                break;
            }
    }

    var megapixels = await context.Characteristics
    .Where(c => c.CharacteristicsType.Name == "Количество мегапикселей")
    .ToListAsync();
    List<float> megapixelsValues = new();
    foreach (var mpx in megapixels)
    {
        megapixelsValues.Add(float.Parse(mpx.Value, provider));
    }
    megapixelsValues.Sort();
    float minMegapixels = megapixelsValues.First();
    float maxMegapixels = megapixelsValues.Last();
}
<div class="accordion-body" style="float:left" ::before>
    <div class="left-filters" ::before>
        <div>
            <a class="btn btn-outline-secondary collapsible-filter">
                <svg class="filter-icon"
                     width="24" height="24">
                    <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                    <use xlink:href="#icon-arrow-down" class="down-icon active"></use>
                </svg>
                Цена
            </a>
            <form class="collapsible-form">
                <input class="form-control" type="number" min="@minPrice" max="@maxPrice" placeholder="от @minPrice">
                <input class="form-control" type="number" min="@minPrice" max="@maxPrice" placeholder="до @maxPrice">
            </form>
        </div>
        <div id="computerCharacteristics" style="display:@(ViewData["ProductType"]?.ToString() == "Компьютер"
|| ViewData["ProductType"]?.ToString() == "Ноутбук" ? "block" : "none")">
            <div>
                <a class="btn btn-outline-secondary collapsible-filter">
                    <svg class="filter-icon"
                         width="24" height="24">
                        <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                        <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                    </svg>
                    Объём оперативной памяти (ГБ)
                </a>
                <form class="collapsible-form">
                    <ul class="scrollable-list" data-list-type="ram">
                        <li class="list-group-item">
                            <input type="checkbox" class="select-all" />
                            <label>Выбрать всё</label>
                        </li>
                        @{
                            var ramSizes = await context.Characteristics
                            .Where(c => c.CharacteristicsType.Name == "Размер оперативной памяти (ГБ)")
                            .ToListAsync();

                            foreach (var ram in ramSizes.DistinctBy(c => c.Value).OrderBy(c => c.Value))
                            {
                                <li class="list-group-item">
                                    <input type="checkbox" />
                                    <label>@ram.Value</label>
                                </li>
                            }
                        }
                    </ul>
                </form>
            </div>
            <div>
                <a class="btn btn-outline-secondary collapsible-filter">
                    <svg class="filter-icon"
                         width="24" height="24">
                        <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                        <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                    </svg>
                    Общий объем накопителей (ГБ)
                </a>
                <form class="collapsible-form">
                    <ul class="scrollable-list" data-list-type="discVolume">
                        <li class="list-group-item">
                            <input type="checkbox" class="select-all" />
                            <label>Выбрать всё</label>
                        </li>
                        @{
                            var driveSizes = await context.Characteristics
                            .Where(c => c.CharacteristicsType.Name == "Объём накопителя (ГБ)")
                            .ToListAsync();

                            foreach (var drive in driveSizes.DistinctBy(c => c.Value).OrderBy(c => c.Value))
                            {
                                <li class="list-group-item">
                                    <input type="checkbox" />
                                    <label>@drive.Value</label>
                                </li>
                            }
                        }
                    </ul>
                </form>
            </div>
            <div>
                <a class="btn btn-outline-secondary collapsible-filter">
                    <svg class="filter-icon"
                         width="24" height="24">
                        <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                        <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                    </svg>
                    Операционная система
                </a>
                <form class="collapsible-form">
                    <ul class="scrollable-list" data-list-type="os">
                        <li class="list-group-item">
                            <input type="checkbox" class="select-all" />
                            <label>Выбрать всё</label>
                        </li>
                        @foreach (var os in Enum.GetValues(typeof(OperatingSystems)).Cast<OperatingSystems>())
                        {
                            <li class="list-group-item">
                                <input type="checkbox" class="os-checkbox" />
                                <label>@os.ToString()</label>
                            </li>
                        }
                    </ul>
                </form>
            </div>
            <div>
                <a class="btn btn-outline-secondary collapsible-filter">
                    <svg class="filter-icon"
                         width="24" height="24">
                        <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                        <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                    </svg>
                    Количество ядер
                </a>
                <form class="collapsible-form">
                    <ul class="scrollable-list" data-list-type="coresCount">
                        <li class="list-group-item">
                            <input type="checkbox" class="select-all" />
                            <label>Выбрать всё</label>
                        </li>
                        @{
                            var coresQuantity = await context.Characteristics
                            .Where(c => c.CharacteristicsType.Name == "Количество ядер")
                            .ToListAsync();

                            foreach (var core in coresQuantity.DistinctBy(c => c.Value).OrderBy(c => int.Parse(c.Value)))
                            {
                                <li class="list-group-item">
                                    <input type="checkbox" />
                                    <label>@core.Value</label>
                                </li>
                            }
                        }
                    </ul>
                </form>
            </div>
        </div>
        <div id="graphicalTabletsCharacteristics" style="display:@(ViewData["ProductType"]?.ToString() == "Графический планшет" ? "block" : "none")">
            <div>
                <a class="btn btn-outline-secondary collapsible-filter">
                    <svg class="filter-icon"
                         width="24" height="24">
                        <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                        <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                    </svg>
                    Ширина рабочей области (мм)
                </a>
                <form class="collapsible-form">
                    <input class="form-control" type="number" min="@minTabletWidth" max="@maxTabletWidth" placeholder="от @minTabletWidth">
                    <input class="form-control" type="number" min="@minTabletWidth" max="@maxTabletWidth" placeholder="до @maxTabletWidth">
                </form>
            </div>
        </div>
        <div id="headphonesCharacteristics" style="display:@(ViewData["ProductType"]?.ToString() == "Наушники" ? "block" : "none")">
            <div>
                <a class="btn btn-outline-secondary collapsible-filter">
                    <svg class="filter-icon"
                         width="24" height="24">
                        <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                        <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                    </svg>
                    Тип конструкции
                </a>
                <form class="collapsible-form">
                    <ul class="scrollable-list" data-list-type="constructionType">
                        <li class="list-group-item">
                            <input type="checkbox" class="select-all" />
                            <label>Выбрать всё</label>
                        </li>
                        @{
                            foreach (var constructionType in Enum.GetValues(typeof(HeadphonesType))
                            .Cast<HeadphonesType>())
                            {
                                <li class="list-group-item">
                                    <input type="checkbox" />
                                    <label>@constructionType.Humanize()</label>
                                </li>
                            }
                        }
                    </ul>
                </form>
            </div>
            <div>
                <a class="btn btn-outline-secondary collapsible-filter">
                    <svg class="filter-icon"
                         width="24" height="24">
                        <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                        <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                    </svg>
                    Формат звуковой схемы
                </a>
                <form class="collapsible-form">
                    <ul class="scrollable-list" data-list-type="audioSchemeFormat">
                        <li class="list-group-item">
                            <input type="checkbox" class="select-all" />
                            <label>Выбрать всё</label>
                        </li>
                        <li class="list-group-item">
                            <input type="checkbox" />
                            <label>1.0</label>
                        </li>
                        <li class="list-group-item">
                            <input type="checkbox" />
                            <label>2.0</label>
                        </li>
                        <li class="list-group-item">
                            <input type="checkbox" />
                            <label>7.1</label>
                        </li>
                        <li class="list-group-item">
                            <input type="checkbox" />
                            <label>7.1 Real</label>
                        </li>
                        <li class="list-group-item">
                            <input type="checkbox" />
                            <label>7.1 Virtual</label>
                        </li>
                    </ul>
                    </ul>
                </form>
            </div>
        </div>
        <div id="keyboardsCharacteristics" style="display:@(ViewData["ProductType"]?.ToString() == "Клавиатура" ? "block" : "none")">
            <div>
                <a class="btn btn-outline-secondary collapsible-filter">
                    <svg class="filter-icon"
                         width="24" height="24">
                        <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                        <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                    </svg>
                    Тип клавиатуры
                </a>
                <form class="collapsible-form">
                    <ul class="scrollable-list" data-list-type="keyboardType">
                        <li class="list-group-item">
                            <input type="checkbox" class="select-all" />
                            <label>Выбрать всё</label>
                        </li>
                        @{
                            foreach (var keyboardType in Enum.GetValues(typeof(KeyboardType))
                            .Cast<KeyboardType>())
                            {
                                <li class="list-group-item">
                                    <input type="checkbox" />
                                    <label>@keyboardType.Humanize()</label>
                                </li>
                            }
                        }
                    </ul>
                </form>
            </div>
            <div>
                <a class="btn btn-outline-secondary collapsible-filter">
                    <svg class="filter-icon"
                         width="24" height="24">
                        <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                        <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                    </svg>
                    Общее количество клавиш
                </a>
                <form class="collapsible-form">
                    <input class="form-control" type="number" min="@minKeysCount" max="@maxKeysCount" placeholder="от @minKeysCount">
                    <input class="form-control" type="number" min="@minKeysCount" max="@maxKeysCount" placeholder="до @maxKeysCount">
                </form>
            </div>
            <div>
                <a class="btn btn-outline-secondary collapsible-filter">
                    <svg class="filter-icon"
                         width="24" height="24">
                        <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                        <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                    </svg>
                    Модель переключателей
                </a>
                <form class="collapsible-form">
                    <ul class="scrollable-list" data-list-type="switchesTypes">
                        <li class="list-group-item">
                            <input type="checkbox" class="select-all" />
                            <label>Выбрать всё</label>
                        </li>
                        @{
                            var switchesTypes = await context.Characteristics
                            .Where(c => c.CharacteristicsType.Name == "Свичи")
                            .ToListAsync();

                            foreach (var switchType in switchesTypes.DistinctBy(c => c.Value).OrderBy(c => c.Value))
                            {
                                <li class="list-group-item">
                                    <input type="checkbox" />
                                    <label>@switchType.Value</label>
                                </li>
                            }
                        }
                    </ul>
                </form>
            </div>
        </div>
        <div id="mouseCharacteristics" style="display:@(ViewData["ProductType"]?.ToString() == "Компьютерная мышь" ? "block" : "none")">
            <div>
                <a class="btn btn-outline-secondary collapsible-filter">
                    <svg class="filter-icon"
                         width="24" height="24">
                        <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                        <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                    </svg>
                    Общее количество кнопок
                </a>
                <form class="collapsible-form">
                    <input class="form-control" type="number" min="0" max="25" placeholder="от 0">
                    <input class="form-control" type="number" min="0" max="25" placeholder="до 25">
                </form>
            </div>
            <div>
                <a class="btn btn-outline-secondary collapsible-filter">
                    <svg class="filter-icon"
                         width="24" height="24">
                        <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                        <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                    </svg>
                    Максимальное разрешение датчика (dpi)
                </a>
                <form class="collapsible-form">
                    <input class="form-control" type="number" min="800" max="42000" placeholder="от 800">
                    <input class="form-control" type="number" min="800" max="42000" placeholder="до 42000">
                </form>
            </div>
        </div>
        <div id="microphonesCharacteristics" style="display:@(ViewData["ProductType"]?.ToString() == "Микрофон" ? "block" : "none")">
            <div>
                <a class="btn btn-outline-secondary collapsible-filter">
                    <svg class="filter-icon"
                         width="24" height="24">
                        <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                        <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                    </svg>
                    Вид исполнения
                </a>
                <form class="collapsible-form">
                    <ul class="scrollable-list" data-list-type="executionTypes">
                        <li class="list-group-item">
                            <input type="checkbox" class="select-all" />
                            <label>Выбрать всё</label>
                        </li>
                        @foreach (var exType in Enum.GetValues(typeof(MicrophoneExecutionTypes)).Cast<MicrophoneExecutionTypes>())
                        {
                            <li class="list-group-item">
                                <input type="checkbox" class="os-checkbox" />
                                <label>@exType.Humanize()</label>
                            </li>
                        }
                    </ul>
                </form>
            </div>
            <div>
                <a class="btn btn-outline-secondary collapsible-filter">
                    <svg class="filter-icon"
                         width="24" height="24">
                        <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                        <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                    </svg>
                    Направленность
                </a>
                <form class="collapsible-form">
                    <ul class="scrollable-list" data-list-type="directions">
                        <li class="list-group-item">
                            <input type="checkbox" class="select-all" />
                            <label>Выбрать всё</label>
                        </li>
                        @foreach (var dirType in Enum.GetValues(typeof(MicrophoneDirections)).Cast<MicrophoneDirections>())
                        {
                            <li class="list-group-item">
                                <input type="checkbox" class="os-checkbox" />
                                <label>@dirType.Humanize()</label>
                            </li>
                        }
                    </ul>
                </form>
            </div>
            <div>
                <a class="btn btn-outline-secondary collapsible-filter">
                    <svg class="filter-icon"
                         width="24" height="24">
                        <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                        <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                    </svg>
                    Минимальная частота (Гц)
                </a>
                <form class="collapsible-form">
                    <ul class="scrollable-list" data-list-type="minFrequency">
                        <li class="list-group-item">
                            <input type="checkbox" class="select-all" />
                            <label>Выбрать всё</label>
                        </li>
                        @{
                            var minFrequency = await context.Characteristics
                            .Where(c => c.CharacteristicsType.Name == "Минимальная частота (Гц)")
                            .ToListAsync();

                            foreach (var freq in minFrequency.DistinctBy(c => c.Value).OrderBy(c => int.Parse(c.Value)))
                            {
                                <li class="list-group-item">
                                    <input type="checkbox" />
                                    <label>@freq.Value</label>
                                </li>
                            }
                        }
                    </ul>
                </form>
            </div>
            <div>
                <a class="btn btn-outline-secondary collapsible-filter">
                    <svg class="filter-icon"
                         width="24" height="24">
                        <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                        <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                    </svg>
                    Максимальная частота (Гц)
                </a>
                <form class="collapsible-form">
                    <ul class="scrollable-list" data-list-type="maxFrequency">
                        <li class="list-group-item">
                            <input type="checkbox" class="select-all" />
                            <label>Выбрать всё</label>
                        </li>
                        @{
                            var maxFrequency = await context.Characteristics
                            .Where(c => c.CharacteristicsType.Name == "Максимальная частота (Гц)")
                            .ToListAsync();

                            foreach (var freq in maxFrequency.DistinctBy(c => c.Value).OrderBy(c => int.Parse(c.Value)))
                            {
                                <li class="list-group-item">
                                    <input type="checkbox" />
                                    <label>@freq.Value</label>
                                </li>
                            }
                        }
                    </ul>
                </form>
            </div>
        </div>
        <div id="monitorsCharacteristics" style="display:@(ViewData["ProductType"]?.ToString() == "Монитор" ? "block" : "none")">
            <div>
                <a class="btn btn-outline-secondary collapsible-filter">
                    <svg class="filter-icon"
                         width="24" height="24">
                        <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                        <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                    </svg>
                    Частота при максимальном разрешении (Гц)
                </a>
                <form class="collapsible-form">
                    <input class="form-control" type="number" min="@minFPS" max="@maxFPS" placeholder="от @minFPS">
                    <input class="form-control" type="number" min="@minFPS" max="@maxFPS" placeholder="до @maxFPS">
                </form>
            </div>
        </div>
        <div id="webcamCharacteristics" style="display:@(ViewData["ProductType"]?.ToString() == "Веб-камера" ? "block" : "none")">
            <div>
                <a class="btn btn-outline-secondary collapsible-filter">
                    <svg class="filter-icon"
                         width="24" height="24">
                        <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                        <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                    </svg>
                    Число мегапикселей (мп)
                </a>
                <form class="collapsible-form">
                    <input class="form-control" type="number" min="@minMegapixels" max="@maxMegapixels" placeholder="от @minMegapixels">
                    <input class="form-control" type="number" min="@minMegapixels" max="@maxMegapixels" placeholder="до @maxMegapixels">
                </form>
            </div>
        </div>
        <div style="display:@(ViewData["ProductType"]?.ToString() == "Наушники"
            || ViewData["ProductType"]?.ToString() == "Веб-камера" ? "block" : "none")">
            <a class="btn btn-outline-secondary collapsible-filter">
                <svg class="filter-icon"
                     width="24" height="24">
                    <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                    <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                </svg>
                Наличие микрофона
            </a>
            <form class="collapsible-form">
                <ul class="scrollable-list" data-list-type="hasMicrophone">
                    <li class="list-group-item" style="display:none">
                        <input type="checkbox" class="select-all" />
                        <label>Выбрать всё</label>
                    </li>
                    <li class="list-group-item">
                        <input type="checkbox" />
                        <label>Есть</label>
                    </li>
                    <li class="list-group-item">
                        <input type="checkbox" />
                        <label>Нет</label>
                    </li>
                </ul>
            </form>
        </div>
        <div style="display:@((ViewData["ProductType"]?.ToString() == "Планшет"
            || ViewData["ProductType"]?.ToString() == "Телевизор"
|| ViewData["ProductType"]?.ToString() == "Веб-камера") ? "block" : "none")">
            <a class="btn btn-outline-secondary collapsible-filter">
                <svg class="filter-icon"
                     width="24" height="24">
                    <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                    <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                </svg>
                Частота обновления экрана
            </a>
            <form class="collapsible-form">
                <ul class="scrollable-list" data-list-type="fpsList">
                    <li class="list-group-item" style="display:none">
                        <input type="checkbox"  class="select-all" />
                        <label>Выбрать всё</label>
                    </li>
                @foreach (var fps in fpsList)
                {
                    <li class="list-group-item">
                        <input type="checkbox" class="os-checkbox" />
                        <label>@fps</label>
                    </li>
                }
                </ul>
            </form>
        </div>
        <div style="display:@((ViewData["ProductType"]?.ToString() == "Монитор"
|| ViewData["ProductType"]?.ToString() == "Планшет"
|| ViewData["ProductType"]?.ToString() == "Телевизор") ? "block" : "none")">
            <a class="btn btn-outline-secondary collapsible-filter">
                <svg class="filter-icon"
                     width="24" height="24">
                    <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                    <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                </svg>
                Диагональ
            </a>
            <form class="collapsible-form">
                <input class="form-control" type="number" min="@minDiagonal" max="@maxDiagonal" placeholder="от @minDiagonal">
                <input class="form-control" type="number" min="@minDiagonal" max="@maxDiagonal" placeholder="до @maxDiagonal">
            </form>
        </div>
        <div style="display:@((ViewData["ProductType"]?.ToString() == "Монитор"
|| ViewData["ProductType"]?.ToString() == "Планшет"
|| ViewData["ProductType"]?.ToString() == "Телевизор") ? "block" : "none")">
            <a class="btn btn-outline-secondary collapsible-filter">
                <svg class="filter-icon"
                     width="24" height="24">
                    <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                    <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                </svg>
                Технология изготовления матрицы
            </a>
            <form class="collapsible-form">
                <ul class="scrollable-list" data-list-type="matrixType">
                    <li class="list-group-item">
                        <input type="checkbox" class="select-all" />
                        <label>Выбрать всё</label>
                    </li>
                    @foreach (var matrixType in Enum.GetValues(typeof(MatrixTypes)).Cast<MatrixTypes>())
                    {
                        <li class="list-group-item">
                            <input type="checkbox" class="os-checkbox" />
                            <label>@matrixType.Humanize()</label>
                        </li>
                    }
                </ul>
            </form>
        </div>
        <div style="display:@(ViewData["ProductType"]?.ToString() == "Наушники"
|| ViewData["ProductType"]?.ToString() == "Микрофон"? "block" : "none")">
            <a class="btn btn-outline-secondary collapsible-filter">
                <svg class="filter-icon"
                     width="24" height="24">
                    <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                    <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                </svg>
                Разъём подключения
            </a>
            <form class="collapsible-form">
                <ul class="scrollable-list" data-list-type="audioConnectionType">
                    <li class="list-group-item">
                        <input type="checkbox" class="select-all" />
                        <label>Выбрать всё</label>
                    </li>
                    @foreach (var connectionType in Enum.GetValues(typeof(AudioConnectionType)).Cast<AudioConnectionType>())
                    {
                        <li class="list-group-item">
                            <input type="checkbox" class="os-checkbox" />
                            <label>@connectionType.Humanize()</label>
                        </li>
                    }
                </ul>
            </form>
        </div>
        <div style="display:@((ViewData["ProductType"]?.ToString() == "Наушники"
|| ViewData["ProductType"]?.ToString() == "Клавиатура"
|| ViewData["ProductType"]?.ToString() == "Компьютерная мышь") ? "block" : "none")">
            <a class="btn btn-outline-secondary collapsible-filter">
                <svg class="filter-icon"
                     width="24" height="24">
                    <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                    <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                </svg>
                Тип подключения
            </a>
            <form class="collapsible-form">
                <ul class="scrollable-list" data-list-type="connectionType">
                    <li class="list-group-item" style="display:none">
                        <input type="checkbox" class="select-all" />
                        <label>Выбрать всё</label>
                    </li>
                    @foreach (var connectionType in Enum.GetValues(typeof(ConnectionType)).Cast<ConnectionType>())
                    {
                        <li class="list-group-item">
                            <input type="checkbox" class="os-checkbox" />
                            <label>@connectionType.Humanize()</label>
                        </li>
                    }
                </ul>
            </form>
        </div>
        <div>
            <a class="btn btn-outline-secondary collapsible-filter">
                <svg class="filter-icon"
                     width="24" height="24">
                    <use xlink:href="#icon-arrow-up" class="up-icon"></use>
                    <use xlink:href="#icon-arrow-down" class="down-icon"></use>
                </svg>
                Производитель
            </a>
            <form class="collapsible-form">
                <ul class="scrollable-list" data-list-type="manufacturer">
                    <li class="list-group-item">
                        <input type="checkbox" class="select-all" />
                        <label>Все производители</label>
                    </li>
                    @{
                        var productTypeName = ViewData["ProductType"]?.ToString() ?? "";
                        var manufacturersByType = await context.Products
                        .Where(p => p.ProductTypes.Name == productTypeName)
                        .Select(p => p.Manufacturer)
                        .Distinct()
                        .ToListAsync();

                        if (!manufacturersByType.Any())
                        {
                            manufacturersByType = await context.Manufacturers.ToListAsync();
                        }
                        foreach (var manufacturer in manufacturersByType)
                        {
                            <li class="list-group-item">
                                <input type="checkbox" />
                                <label>@manufacturer.Name</label>
                            </li>
                        }
                    }
                </ul>
            </form>

        </div>
        <div></div>
    </div>
</div>

<div class="left-filters">
    <table class="table" style="text-align:center">
        <thead>
            <tr>
                <svg style="display:none;">
                    <symbol id="icon-arrow-up" viewBox="0 0 24 24">
                        <path d="M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z" />
                    </symbol>
                    <symbol id="icon-arrow-down" viewBox="0 0 24 24">
                        <path d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z" />
                    </symbol>
                </svg>
                <th style="border:double">
                    <a class="sort-link" data-sort-field="Price"
                       asp-action="Index"
                       asp-route-currentFilter="@ViewData["CurrentFilter"]"
                       asp-route-productType="@ViewData["ProductType"]"
                       asp-route-sortField="Price"
                       asp-route-sortOrder="@ViewData["PriceSortOrder"]">
                        @Html.DisplayNameFor(model => model.First().Price)
                        <svg class="sort-icon @(ViewData["SortField"]?.ToString() == "Price" ? "active" : "")"
                             width="24" height="24"
                             data-direction="@ViewData["SortOrder"]">
                            <use xlink:href="#icon-arrow-up" class="asc-icon"></use>
                            <use xlink:href="#icon-arrow-down" class="desc-icon"></use>
                        </svg>
                    </a>
                </th>
                <th style="border:double">
                    @Html.DisplayNameFor(model => model.First().Name)
                </th>
                <th style="border:double">
                    @Html.DisplayNameFor(model => model.First().Model)
                </th>
                <th style="border:double">
                    @Html.DisplayNameFor(model => model.First().Color)
                </th>
                <th style="border:double">
                    <a class="sort-link" data-sort-field="Warranty"
                       asp-action="Index"
                       asp-route-productType="@ViewData["ProductType"]"
                       asp-route-currentFilter="@ViewData["CurrentFilter"]"
                       asp-route-sortField="Warranty"
                       asp-route-sortOrder="@ViewData["WarrantySortOrder"]">
                        @Html.DisplayNameFor(model => model.First().Warranty)
                        <svg class="sort-icon @(ViewData["SortField"]?.ToString() == "Warranty" ? "active" : "")"
                             width="24" height="24"
                             data-direction="@ViewData["SortOrder"]">
                            <use xlink:href="#icon-arrow-up" class="asc-icon"></use>
                            <use xlink:href="#icon-arrow-down" class="desc-icon"></use>
                        </svg>
                    </a>
                </th>
                <th style="border:double">
                    @Html.DisplayNameFor(model => model.First().Manufacturer)
                </th>
                <th style="border:double">
                    @Html.DisplayNameFor(model => model.First().ProductTypes)
                </th>
                <th style="border:double">
                    Действия
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td style="border:double">
                        @Html.DisplayFor(modelItem => item.Price)
                    </td>
                    <td style="border:double">
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td style="border:double">
                        @Html.DisplayFor(modelItem => item.Model)
                    </td>
                    <td style="border:double">
                        @Html.DisplayFor(modelItem => item.Color)
                    </td>
                    <td style="border:double">
                        @Html.DisplayFor(modelItem => item.Warranty) мес.
                    </td>
                    <td style="border:double">
                        @Html.DisplayFor(modelItem => item.Manufacturer.Name)
                    </td>
                    <td style="border:double">
                        @Html.DisplayFor(modelItem => item.ProductTypes.Name)
                    </td>
                    <td style="border:double">
                        <a asp-action="Edit"
                           asp-route-productType="@ViewData["ProductType"]"
                           asp-route-currentSort="@ViewData["CurrentSort"]"
                           asp-route-searchString="@ViewData["SearchString"]"
                           asp-route-currentFilter="@ViewData["CurrentFilter"]"
                           asp-route-sortField="@ViewData["SortField"]"
                           asp-route-sortOrder="@ViewData["SortOrder"]"
                           asp-route-pageNumber="@ViewData["PageNumber"]"
                           asp-route-id="@item.Id">
                            Редактировать
                        </a> |
                        <a asp-action="Details"
                           asp-route-productType="@ViewData["ProductType"]"
                           asp-route-currentSort="@ViewData["CurrentSort"]"
                           asp-route-searchString="@ViewData["SearchString"]"
                           asp-route-currentFilter="@ViewData["CurrentFilter"]"
                           asp-route-sortField="@ViewData["SortField"]"
                           asp-route-sortOrder="@ViewData["SortOrder"]"
                           asp-route-pageNumber="@ViewData["PageNumber"]"
                           asp-route-id="@item.Id">
                            Подробно
                        </a> |
                        <a asp-action="Delete"
                           asp-route-productType="@ViewData["ProductType"]"
                           asp-route-currentSort="@ViewData["CurrentSort"]"
                           asp-route-searchString="@ViewData["SearchString"]"
                           asp-route-currentFilter="@ViewData["CurrentFilter"]"
                           asp-route-sortField="@ViewData["SortField"]"
                           asp-route-sortOrder="@ViewData["SortOrder"]"
                           asp-route-pageNumber="@ViewData["PageNumber"]"
                           asp-route-id="@item.Id">
                            Удалить
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @{
        var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
        var nextDisabled = !Model.HasNextPage ? "disabled" : "";
    }
    <p>
        Страница @(Model.PageIndex)
    </p>

    <a class="btn btn-default @prevDisabled"
       asp-action="Index"
       asp-route-productType="@ViewData["ProductType"]"
       asp-route-currentSort="@ViewData["CurrentSort"]"
       asp-route-searchString="@ViewData["SearchString"]"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       asp-route-sortField="@ViewData["SortField"]"
       asp-route-sortOrder="@ViewData["SortOrder"]"
       asp-route-pageNumber="@(Model.PageIndex - 1)">
        &#129186 Назад
    </a>
    <a class="btn btn-default @nextDisabled"
       asp-action="Index"
       asp-route-productType="@ViewData["ProductType"]"
       asp-route-currentSort="@ViewData["CurrentSort"]"
       asp-route-searchString="@ViewData["SearchString"]"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       asp-route-sortField="@ViewData["SortField"]"
       asp-route-sortOrder="@ViewData["SortOrder"]"
       asp-route-pageNumber="@(Model.PageIndex + 1)">
        Далее &#129187
    </a>
</div>
<style>
    .collapsible-filter {
        text-align: left;
        width: 250px;
        color: black;
    }

    .collapsible-form {
        display: none;
    }

    .left-filters {
        float: left;
    }

    .list-group-item {
        user-select: none;
    }

    .scrollable-list {
        height: 300px;
        width: 250px;
        overflow-y: auto;
        border: 1px solid #ccc;
        padding: 5px;
    }

    .filter-icon {
        float: left;
    }

    .sort-icon {
        vertical-align: middle;
        margin-left: 5px;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

        .sort-icon.active {
            opacity: 1;
        }

    .down-icon {
        display: block;
    }

    .up-icon {
        display: none;
    }

    .asc-icon {
        display: none;
    }

    .desc-icon {
        display: none;
    }

    [data-direction="asc"] .asc-icon {
        display: block;
    }

    [data-direction="desc"] .desc-icon {
        display: block;
    }
</style>
@section Scripts {
    <script>
                document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.sort-link').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();

                    const sortField = this.dataset.sortField;
                    const icon = this.querySelector('svg');
                    const currentOrder = icon.dataset.direction === 'asc' ? 'desc' : 'asc';

                    document.querySelectorAll('.sort-icon').forEach(otherIcon => {
                        otherIcon.classList.remove('active');
                        otherIcon.dataset.direction = '';
                        otherIcon.querySelector('.asc-icon').style.display = 'none';
                        otherIcon.querySelector('.desc-icon').style.display = 'none';
                    });

                    icon.classList.add('active');
                    icon.dataset.direction = currentOrder;

                    if (currentOrder === 'asc') {
                        icon.querySelector('.asc-icon').style.display = 'block';
                        icon.querySelector('.desc-icon').style.display = 'none';
                    } else {
                        icon.querySelector('.desc-icon').style.display = 'block';
                        icon.querySelector('.asc-icon').style.display = 'none';
                    }

                    const url = new URL(window.location.href);
                    url.searchParams.set('sortField', sortField);
                    url.searchParams.set('sortOrder', currentOrder);
                    window.location.href = url.toString();
                });
            });
        });

             $(document).ready(function () {
            $('.list-group-item').hover(
                function () { $(this).css('background-color', '#f8f9fa'); },
                function () { $(this).css('background-color', ''); }
            );

                    $('.scrollable-list').each(function() {
                const list = $(this);

                list.find('.list-group-item').click(function(e) {

                    const checkbox = $(this).find('input[type="checkbox"]');
                    if (!$(e.target).is(':checkbox')) {
                        checkbox.prop('checked', !checkbox.prop('checked')).trigger('change');
                    }
                });

                list.find('input[type="checkbox"]:first').change(function() {
                    const isChecked = $(this).prop('checked');
                    list.find('input[type="checkbox"]').not(this).prop('checked', isChecked);
                });

                list.find('input[type="checkbox"]:not(:first)').change(function() {
                    const allChecked = list.find('input[type="checkbox"]:not(:first)').length ===
                                     list.find('input[type="checkbox"]:not(:first):checked').length;
                    list.find('input[type="checkbox"]:first').prop('checked', allChecked);
                });
            });

                    $('.collapsible-filter').click(function(e) {
                e.preventDefault();

                var filterBlock = $(this).closest("div");
                var form = filterBlock.find('.collapsible-form');
                var upIcon = filterBlock.find('.up-icon');
                var downIcon = filterBlock.find('.down-icon');
                if (form.is(':hidden'))
                {
                    upIcon.show()
                    downIcon.hide()
                }
                else
                {
                    downIcon.show()
                    upIcon.hide()
                }

                form.toggle();
            });
            });

    </script>
}

